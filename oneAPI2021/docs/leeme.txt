Ficheros:
* main.cpp: 
	Fichero principal, que hace la llamada al parallel for que en ultima instancia tu crearás en base a los grafos TBB. La llamada se hace en la linea 88 dentro de un bucle for (que recorre los time steps de la simulacion)

* BarnesHut.h:
	Fichero con las funciones y estructuras de datos para resolver el problema, que se llaman desde la version CPU

* kernel.cl:
	Equivalente al anterior, pero con el kernel de GPU para resolver el problema

* Body.h:
	Fichero con la clase que se hay que pasar al scheduler para que pueda realizar el trabajo. En esta clase hay unos metodos que el usuario tiene que crear que seran llamados desde el scheduler, basicamente son la funcion que hace el trabajo de CPU (OperatorCPU) y la que hace el de GPU (OperatorGPU) (mas el envio y recepcion de datos)

* Scheduler.h y LogFit.h
	Implementacion del scheduler que reparte el trabajo entre GPU y CPU. Esta implementado usando el template pipeline de TBB, basicamente tu implementaras esta parte usando grafos y simplificando Body para que solo haya que pasarle el kernel.cl .

* Makefile:
	Yo compilo con make, está probado en un linux y compila, con las librerias TBB y OpenCL instaladas (ojo con los directorios de los includes)

* runA.in:
	Fichero con datos de entrada para una ejecucion

Ejecucion:
	./logfit runC.in nCores nGpus(0-1)

	Ejemplo:
		./logfit runC.in 4 1
			Ejecuta con 4 cores y con GPU
